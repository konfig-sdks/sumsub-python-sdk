# coding: utf-8

"""
    Sumsub API

    Sumsub is the one verification platform to secure the whole user journey. With Sumsub's customizable KYC, KYB, transaction monitoring and fraud prevention solutions, you can orchestrate your verification process, welcome more customers worldwide, meet compliance requirements, reduce costs and protect your business.  Sumsub has over 2,000 clients in fintech, crypto, transportation, trading, e-commerce and gaming industries including Binance, Wirex, Avis, Bybit, Huobi, Unlimit, Flutter, Kaizen Gaming, and TransferGo.

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from sumsub_python_sdk.pydantic.applicant_submit_transaction_data_request1_applicant import ApplicantSubmitTransactionDataRequest1Applicant
from sumsub_python_sdk.pydantic.applicant_submit_transaction_data_request1_counterparty import ApplicantSubmitTransactionDataRequest1Counterparty
from sumsub_python_sdk.pydantic.applicant_submit_transaction_data_request1_info import ApplicantSubmitTransactionDataRequest1Info
from sumsub_python_sdk.pydantic.applicant_submit_transaction_data_request1_props import ApplicantSubmitTransactionDataRequest1Props

class ApplicantSubmitTransactionDataRequest1(BaseModel):
    info: ApplicantSubmitTransactionDataRequest1Info = Field(alias='info')

    # A unique transaction identification number. <br>**Note:** If the specified `txnId` already exists, a `409` error code \"Entity already exists\" is returned. To update an existing transaction, use the [bulk import method](doc:update-transactions-via-bulk-import-method).
    txn_id: str = Field(alias='txnId')

    applicant: ApplicantSubmitTransactionDataRequest1Applicant = Field(alias='applicant')

    counterparty: ApplicantSubmitTransactionDataRequest1Counterparty = Field(alias='counterparty')

    # Date and time when the transaction was initiated (format `yyyy-MM-dd HH:mm:ss+XXXX`, e.g. 2022-11-24 23:37:02+0000).
    txn_date: typing.Optional[date] = Field(None, alias='txnDate')

    # A transaction type. Expects values: </br> <ul>   <li><code>finance</code>(default)</li>   <li><code>gamblingBet</code></li>   <li><code>gamblingLimitChange</code></li>   <li><code>gamblingBonusChange</code></li>   <li><code>kyc</code></li>   <li><code>travelRule</code></li>   <li><code>userPlatformEvent</code></li>   <ul>     <li><code>login</code></li>     <li><code>signup</code></li>     <li><code>passwordChange</code></li>     <li><code>twoFaReset</code></li>   </ul> </ul>
    type: typing.Optional[str] = Field(None, alias='type')

    # A source key indication to separate access to transactions.
    source_key: typing.Optional[str] = Field(None, alias='sourceKey')

    props: typing.Optional[ApplicantSubmitTransactionDataRequest1Props] = Field(None, alias='props')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
