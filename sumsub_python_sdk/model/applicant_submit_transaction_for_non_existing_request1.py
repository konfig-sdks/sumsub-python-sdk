# coding: utf-8

"""
    Sumsub API

    Sumsub is the one verification platform to secure the whole user journey. With Sumsub's customizable KYC, KYB, transaction monitoring and fraud prevention solutions, you can orchestrate your verification process, welcome more customers worldwide, meet compliance requirements, reduce costs and protect your business.  Sumsub has over 2,000 clients in fintech, crypto, transportation, trading, e-commerce and gaming industries including Binance, Wirex, Avis, Bybit, Huobi, Unlimit, Flutter, Kaizen Gaming, and TransferGo.

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from sumsub_python_sdk import schemas  # noqa: F401


class ApplicantSubmitTransactionForNonExistingRequest1(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "counterparty",
            "applicant",
            "info",
            "txnId",
        }
        
        class properties:
        
            @staticmethod
            def info() -> typing.Type['ApplicantSubmitTransactionForNonExistingRequest1Info']:
                return ApplicantSubmitTransactionForNonExistingRequest1Info
            txnId = schemas.StrSchema
        
            @staticmethod
            def applicant() -> typing.Type['ApplicantSubmitTransactionForNonExistingRequest1Applicant']:
                return ApplicantSubmitTransactionForNonExistingRequest1Applicant
        
            @staticmethod
            def counterparty() -> typing.Type['ApplicantSubmitTransactionForNonExistingRequest1Counterparty']:
                return ApplicantSubmitTransactionForNonExistingRequest1Counterparty
            txnDate = schemas.DateSchema
            props = schemas.DictSchema
            type = schemas.StrSchema
            sourceKey = schemas.StrSchema
            __annotations__ = {
                "info": info,
                "txnId": txnId,
                "applicant": applicant,
                "counterparty": counterparty,
                "txnDate": txnDate,
                "props": props,
                "type": type,
                "sourceKey": sourceKey,
            }
    
    counterparty: 'ApplicantSubmitTransactionForNonExistingRequest1Counterparty'
    applicant: 'ApplicantSubmitTransactionForNonExistingRequest1Applicant'
    info: 'ApplicantSubmitTransactionForNonExistingRequest1Info'
    txnId: MetaOapg.properties.txnId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["info"]) -> 'ApplicantSubmitTransactionForNonExistingRequest1Info': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["txnId"]) -> MetaOapg.properties.txnId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["applicant"]) -> 'ApplicantSubmitTransactionForNonExistingRequest1Applicant': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["counterparty"]) -> 'ApplicantSubmitTransactionForNonExistingRequest1Counterparty': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["txnDate"]) -> MetaOapg.properties.txnDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["props"]) -> MetaOapg.properties.props: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sourceKey"]) -> MetaOapg.properties.sourceKey: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["info", "txnId", "applicant", "counterparty", "txnDate", "props", "type", "sourceKey", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["info"]) -> 'ApplicantSubmitTransactionForNonExistingRequest1Info': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["txnId"]) -> MetaOapg.properties.txnId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["applicant"]) -> 'ApplicantSubmitTransactionForNonExistingRequest1Applicant': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["counterparty"]) -> 'ApplicantSubmitTransactionForNonExistingRequest1Counterparty': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["txnDate"]) -> typing.Union[MetaOapg.properties.txnDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["props"]) -> typing.Union[MetaOapg.properties.props, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sourceKey"]) -> typing.Union[MetaOapg.properties.sourceKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["info", "txnId", "applicant", "counterparty", "txnDate", "props", "type", "sourceKey", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        counterparty: 'ApplicantSubmitTransactionForNonExistingRequest1Counterparty',
        applicant: 'ApplicantSubmitTransactionForNonExistingRequest1Applicant',
        info: 'ApplicantSubmitTransactionForNonExistingRequest1Info',
        txnId: typing.Union[MetaOapg.properties.txnId, str, ],
        txnDate: typing.Union[MetaOapg.properties.txnDate, str, date, schemas.Unset] = schemas.unset,
        props: typing.Union[MetaOapg.properties.props, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        sourceKey: typing.Union[MetaOapg.properties.sourceKey, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ApplicantSubmitTransactionForNonExistingRequest1':
        return super().__new__(
            cls,
            *args,
            counterparty=counterparty,
            applicant=applicant,
            info=info,
            txnId=txnId,
            txnDate=txnDate,
            props=props,
            type=type,
            sourceKey=sourceKey,
            _configuration=_configuration,
            **kwargs,
        )

from sumsub_python_sdk.model.applicant_submit_transaction_for_non_existing_request1_applicant import ApplicantSubmitTransactionForNonExistingRequest1Applicant
from sumsub_python_sdk.model.applicant_submit_transaction_for_non_existing_request1_counterparty import ApplicantSubmitTransactionForNonExistingRequest1Counterparty
from sumsub_python_sdk.model.applicant_submit_transaction_for_non_existing_request1_info import ApplicantSubmitTransactionForNonExistingRequest1Info
