# coding: utf-8

"""
    Sumsub API

    Sumsub is the one verification platform to secure the whole user journey. With Sumsub's customizable KYC, KYB, transaction monitoring and fraud prevention solutions, you can orchestrate your verification process, welcome more customers worldwide, meet compliance requirements, reduce costs and protect your business.  Sumsub has over 2,000 clients in fintech, crypto, transportation, trading, e-commerce and gaming industries including Binance, Wirex, Avis, Bybit, Huobi, Unlimit, Flutter, Kaizen Gaming, and TransferGo.

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from sumsub_python_sdk import schemas  # noqa: F401


class ApplicantSubmitTransactionForNonExistingRequest1Counterparty(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Transaction participant data (sender or remitter, depending on `info.direction`).
    """


    class MetaOapg:
        required = {
            "externalUserId",
            "fullName",
            "type",
        }
        
        class properties:
            externalUserId = schemas.StrSchema
            fullName = schemas.StrSchema
            type = schemas.StrSchema
        
            @staticmethod
            def address() -> typing.Type['ApplicantSubmitTransactionForNonExistingRequest1CounterpartyAddress']:
                return ApplicantSubmitTransactionForNonExistingRequest1CounterpartyAddress
        
            @staticmethod
            def institutionInfo() -> typing.Type['ApplicantSubmitTransactionForNonExistingRequest1CounterpartyInstitutionInfo']:
                return ApplicantSubmitTransactionForNonExistingRequest1CounterpartyInstitutionInfo
        
            @staticmethod
            def paymentMethod() -> typing.Type['ApplicantSubmitTransactionForNonExistingRequest1CounterpartyPaymentMethod']:
                return ApplicantSubmitTransactionForNonExistingRequest1CounterpartyPaymentMethod
        
            @staticmethod
            def device() -> typing.Type['ApplicantSubmitTransactionForNonExistingRequest1CounterpartyDevice']:
                return ApplicantSubmitTransactionForNonExistingRequest1CounterpartyDevice
        
            @staticmethod
            def idDocs() -> typing.Type['ApplicantSubmitTransactionForNonExistingRequest1CounterpartyIdDocs']:
                return ApplicantSubmitTransactionForNonExistingRequest1CounterpartyIdDocs
            __annotations__ = {
                "externalUserId": externalUserId,
                "fullName": fullName,
                "type": type,
                "address": address,
                "institutionInfo": institutionInfo,
                "paymentMethod": paymentMethod,
                "device": device,
                "idDocs": idDocs,
            }
    
    externalUserId: MetaOapg.properties.externalUserId
    fullName: MetaOapg.properties.fullName
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["externalUserId"]) -> MetaOapg.properties.externalUserId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fullName"]) -> MetaOapg.properties.fullName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address"]) -> 'ApplicantSubmitTransactionForNonExistingRequest1CounterpartyAddress': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["institutionInfo"]) -> 'ApplicantSubmitTransactionForNonExistingRequest1CounterpartyInstitutionInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paymentMethod"]) -> 'ApplicantSubmitTransactionForNonExistingRequest1CounterpartyPaymentMethod': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device"]) -> 'ApplicantSubmitTransactionForNonExistingRequest1CounterpartyDevice': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idDocs"]) -> 'ApplicantSubmitTransactionForNonExistingRequest1CounterpartyIdDocs': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["externalUserId", "fullName", "type", "address", "institutionInfo", "paymentMethod", "device", "idDocs", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["externalUserId"]) -> MetaOapg.properties.externalUserId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fullName"]) -> MetaOapg.properties.fullName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> typing.Union['ApplicantSubmitTransactionForNonExistingRequest1CounterpartyAddress', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["institutionInfo"]) -> typing.Union['ApplicantSubmitTransactionForNonExistingRequest1CounterpartyInstitutionInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paymentMethod"]) -> typing.Union['ApplicantSubmitTransactionForNonExistingRequest1CounterpartyPaymentMethod', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device"]) -> typing.Union['ApplicantSubmitTransactionForNonExistingRequest1CounterpartyDevice', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idDocs"]) -> typing.Union['ApplicantSubmitTransactionForNonExistingRequest1CounterpartyIdDocs', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["externalUserId", "fullName", "type", "address", "institutionInfo", "paymentMethod", "device", "idDocs", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        externalUserId: typing.Union[MetaOapg.properties.externalUserId, str, ],
        fullName: typing.Union[MetaOapg.properties.fullName, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        address: typing.Union['ApplicantSubmitTransactionForNonExistingRequest1CounterpartyAddress', schemas.Unset] = schemas.unset,
        institutionInfo: typing.Union['ApplicantSubmitTransactionForNonExistingRequest1CounterpartyInstitutionInfo', schemas.Unset] = schemas.unset,
        paymentMethod: typing.Union['ApplicantSubmitTransactionForNonExistingRequest1CounterpartyPaymentMethod', schemas.Unset] = schemas.unset,
        device: typing.Union['ApplicantSubmitTransactionForNonExistingRequest1CounterpartyDevice', schemas.Unset] = schemas.unset,
        idDocs: typing.Union['ApplicantSubmitTransactionForNonExistingRequest1CounterpartyIdDocs', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ApplicantSubmitTransactionForNonExistingRequest1Counterparty':
        return super().__new__(
            cls,
            *args,
            externalUserId=externalUserId,
            fullName=fullName,
            type=type,
            address=address,
            institutionInfo=institutionInfo,
            paymentMethod=paymentMethod,
            device=device,
            idDocs=idDocs,
            _configuration=_configuration,
            **kwargs,
        )

from sumsub_python_sdk.model.applicant_submit_transaction_for_non_existing_request1_counterparty_address import ApplicantSubmitTransactionForNonExistingRequest1CounterpartyAddress
from sumsub_python_sdk.model.applicant_submit_transaction_for_non_existing_request1_counterparty_device import ApplicantSubmitTransactionForNonExistingRequest1CounterpartyDevice
from sumsub_python_sdk.model.applicant_submit_transaction_for_non_existing_request1_counterparty_id_docs import ApplicantSubmitTransactionForNonExistingRequest1CounterpartyIdDocs
from sumsub_python_sdk.model.applicant_submit_transaction_for_non_existing_request1_counterparty_institution_info import ApplicantSubmitTransactionForNonExistingRequest1CounterpartyInstitutionInfo
from sumsub_python_sdk.model.applicant_submit_transaction_for_non_existing_request1_counterparty_payment_method import ApplicantSubmitTransactionForNonExistingRequest1CounterpartyPaymentMethod
