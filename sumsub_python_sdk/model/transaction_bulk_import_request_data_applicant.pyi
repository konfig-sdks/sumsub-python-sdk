# coding: utf-8

"""
    Sumsub API

    Sumsub is the one verification platform to secure the whole user journey. With Sumsub's customizable KYC, KYB, transaction monitoring and fraud prevention solutions, you can orchestrate your verification process, welcome more customers worldwide, meet compliance requirements, reduce costs and protect your business.  Sumsub has over 2,000 clients in fintech, crypto, transportation, trading, e-commerce and gaming industries including Binance, Wirex, Avis, Bybit, Huobi, Unlimit, Flutter, Kaizen Gaming, and TransferGo.

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from sumsub_python_sdk import schemas  # noqa: F401


class TransactionBulkImportRequestDataApplicant(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Transaction participant data with mandatory `applicantId` (sender or remitter depending on `info.direction`).
    """


    class MetaOapg:
        required = {
            "externalUserId",
            "fullName",
            "type",
        }
        
        class properties:
            externalUserId = schemas.StrSchema
            fullName = schemas.StrSchema
            type = schemas.StrSchema
        
            @staticmethod
            def address() -> typing.Type['TransactionBulkImportRequestDataApplicantAddress']:
                return TransactionBulkImportRequestDataApplicantAddress
        
            @staticmethod
            def institutionInfo() -> typing.Type['TransactionBulkImportRequestDataApplicantInstitutionInfo']:
                return TransactionBulkImportRequestDataApplicantInstitutionInfo
        
            @staticmethod
            def paymentMethod() -> typing.Type['TransactionBulkImportRequestDataApplicantPaymentMethod']:
                return TransactionBulkImportRequestDataApplicantPaymentMethod
        
            @staticmethod
            def device() -> typing.Type['TransactionBulkImportRequestDataApplicantDevice']:
                return TransactionBulkImportRequestDataApplicantDevice
        
            @staticmethod
            def idDocs() -> typing.Type['TransactionBulkImportRequestDataApplicantIdDocs']:
                return TransactionBulkImportRequestDataApplicantIdDocs
            __annotations__ = {
                "externalUserId": externalUserId,
                "fullName": fullName,
                "type": type,
                "address": address,
                "institutionInfo": institutionInfo,
                "paymentMethod": paymentMethod,
                "device": device,
                "idDocs": idDocs,
            }
    
    externalUserId: MetaOapg.properties.externalUserId
    fullName: MetaOapg.properties.fullName
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["externalUserId"]) -> MetaOapg.properties.externalUserId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fullName"]) -> MetaOapg.properties.fullName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address"]) -> 'TransactionBulkImportRequestDataApplicantAddress': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["institutionInfo"]) -> 'TransactionBulkImportRequestDataApplicantInstitutionInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paymentMethod"]) -> 'TransactionBulkImportRequestDataApplicantPaymentMethod': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device"]) -> 'TransactionBulkImportRequestDataApplicantDevice': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["idDocs"]) -> 'TransactionBulkImportRequestDataApplicantIdDocs': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["externalUserId", "fullName", "type", "address", "institutionInfo", "paymentMethod", "device", "idDocs", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["externalUserId"]) -> MetaOapg.properties.externalUserId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fullName"]) -> MetaOapg.properties.fullName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> typing.Union['TransactionBulkImportRequestDataApplicantAddress', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["institutionInfo"]) -> typing.Union['TransactionBulkImportRequestDataApplicantInstitutionInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paymentMethod"]) -> typing.Union['TransactionBulkImportRequestDataApplicantPaymentMethod', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device"]) -> typing.Union['TransactionBulkImportRequestDataApplicantDevice', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["idDocs"]) -> typing.Union['TransactionBulkImportRequestDataApplicantIdDocs', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["externalUserId", "fullName", "type", "address", "institutionInfo", "paymentMethod", "device", "idDocs", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        externalUserId: typing.Union[MetaOapg.properties.externalUserId, str, ],
        fullName: typing.Union[MetaOapg.properties.fullName, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        address: typing.Union['TransactionBulkImportRequestDataApplicantAddress', schemas.Unset] = schemas.unset,
        institutionInfo: typing.Union['TransactionBulkImportRequestDataApplicantInstitutionInfo', schemas.Unset] = schemas.unset,
        paymentMethod: typing.Union['TransactionBulkImportRequestDataApplicantPaymentMethod', schemas.Unset] = schemas.unset,
        device: typing.Union['TransactionBulkImportRequestDataApplicantDevice', schemas.Unset] = schemas.unset,
        idDocs: typing.Union['TransactionBulkImportRequestDataApplicantIdDocs', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TransactionBulkImportRequestDataApplicant':
        return super().__new__(
            cls,
            *args,
            externalUserId=externalUserId,
            fullName=fullName,
            type=type,
            address=address,
            institutionInfo=institutionInfo,
            paymentMethod=paymentMethod,
            device=device,
            idDocs=idDocs,
            _configuration=_configuration,
            **kwargs,
        )

from sumsub_python_sdk.model.transaction_bulk_import_request_data_applicant_address import TransactionBulkImportRequestDataApplicantAddress
from sumsub_python_sdk.model.transaction_bulk_import_request_data_applicant_device import TransactionBulkImportRequestDataApplicantDevice
from sumsub_python_sdk.model.transaction_bulk_import_request_data_applicant_id_docs import TransactionBulkImportRequestDataApplicantIdDocs
from sumsub_python_sdk.model.transaction_bulk_import_request_data_applicant_institution_info import TransactionBulkImportRequestDataApplicantInstitutionInfo
from sumsub_python_sdk.model.transaction_bulk_import_request_data_applicant_payment_method import TransactionBulkImportRequestDataApplicantPaymentMethod
