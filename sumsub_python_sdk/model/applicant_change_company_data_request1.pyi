# coding: utf-8

"""
    Sumsub API

    Sumsub is the one verification platform to secure the whole user journey. With Sumsub's customizable KYC, KYB, transaction monitoring and fraud prevention solutions, you can orchestrate your verification process, welcome more customers worldwide, meet compliance requirements, reduce costs and protect your business.  Sumsub has over 2,000 clients in fintech, crypto, transportation, trading, e-commerce and gaming industries including Binance, Wirex, Avis, Bybit, Huobi, Unlimit, Flutter, Kaizen Gaming, and TransferGo.

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from sumsub_python_sdk import schemas  # noqa: F401


class ApplicantChangeCompanyDataRequest1(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "registrationNumber",
            "companyName",
        }
        
        class properties:
            companyName = schemas.StrSchema
            registrationNumber = schemas.StrSchema
            country = schemas.StrSchema
            legalAddress = schemas.StrSchema
            incorporatedOn = schemas.StrSchema
            type = schemas.StrSchema
            email = schemas.StrSchema
            controlScheme = schemas.StrSchema
            phone = schemas.StrSchema
            taxId = schemas.StrSchema
            registrationLocation = schemas.StrSchema
            website = schemas.StrSchema
            postalAddress = schemas.StrSchema
        
            @staticmethod
            def beneficiaries() -> typing.Type['ApplicantChangeCompanyDataRequest1Beneficiaries']:
                return ApplicantChangeCompanyDataRequest1Beneficiaries
        
            @staticmethod
            def addresses() -> typing.Type['ApplicantChangeCompanyDataRequest1Addresses']:
                return ApplicantChangeCompanyDataRequest1Addresses
            __annotations__ = {
                "companyName": companyName,
                "registrationNumber": registrationNumber,
                "country": country,
                "legalAddress": legalAddress,
                "incorporatedOn": incorporatedOn,
                "type": type,
                "email": email,
                "controlScheme": controlScheme,
                "phone": phone,
                "taxId": taxId,
                "registrationLocation": registrationLocation,
                "website": website,
                "postalAddress": postalAddress,
                "beneficiaries": beneficiaries,
                "addresses": addresses,
            }
    
    registrationNumber: MetaOapg.properties.registrationNumber
    companyName: MetaOapg.properties.companyName
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyName"]) -> MetaOapg.properties.companyName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["registrationNumber"]) -> MetaOapg.properties.registrationNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["legalAddress"]) -> MetaOapg.properties.legalAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["incorporatedOn"]) -> MetaOapg.properties.incorporatedOn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["controlScheme"]) -> MetaOapg.properties.controlScheme: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phone"]) -> MetaOapg.properties.phone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taxId"]) -> MetaOapg.properties.taxId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["registrationLocation"]) -> MetaOapg.properties.registrationLocation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["website"]) -> MetaOapg.properties.website: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["postalAddress"]) -> MetaOapg.properties.postalAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["beneficiaries"]) -> 'ApplicantChangeCompanyDataRequest1Beneficiaries': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addresses"]) -> 'ApplicantChangeCompanyDataRequest1Addresses': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["companyName", "registrationNumber", "country", "legalAddress", "incorporatedOn", "type", "email", "controlScheme", "phone", "taxId", "registrationLocation", "website", "postalAddress", "beneficiaries", "addresses", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyName"]) -> MetaOapg.properties.companyName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["registrationNumber"]) -> MetaOapg.properties.registrationNumber: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> typing.Union[MetaOapg.properties.country, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["legalAddress"]) -> typing.Union[MetaOapg.properties.legalAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["incorporatedOn"]) -> typing.Union[MetaOapg.properties.incorporatedOn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union[MetaOapg.properties.email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["controlScheme"]) -> typing.Union[MetaOapg.properties.controlScheme, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phone"]) -> typing.Union[MetaOapg.properties.phone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taxId"]) -> typing.Union[MetaOapg.properties.taxId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["registrationLocation"]) -> typing.Union[MetaOapg.properties.registrationLocation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["website"]) -> typing.Union[MetaOapg.properties.website, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["postalAddress"]) -> typing.Union[MetaOapg.properties.postalAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["beneficiaries"]) -> typing.Union['ApplicantChangeCompanyDataRequest1Beneficiaries', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addresses"]) -> typing.Union['ApplicantChangeCompanyDataRequest1Addresses', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["companyName", "registrationNumber", "country", "legalAddress", "incorporatedOn", "type", "email", "controlScheme", "phone", "taxId", "registrationLocation", "website", "postalAddress", "beneficiaries", "addresses", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        registrationNumber: typing.Union[MetaOapg.properties.registrationNumber, str, ],
        companyName: typing.Union[MetaOapg.properties.companyName, str, ],
        country: typing.Union[MetaOapg.properties.country, str, schemas.Unset] = schemas.unset,
        legalAddress: typing.Union[MetaOapg.properties.legalAddress, str, schemas.Unset] = schemas.unset,
        incorporatedOn: typing.Union[MetaOapg.properties.incorporatedOn, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        email: typing.Union[MetaOapg.properties.email, str, schemas.Unset] = schemas.unset,
        controlScheme: typing.Union[MetaOapg.properties.controlScheme, str, schemas.Unset] = schemas.unset,
        phone: typing.Union[MetaOapg.properties.phone, str, schemas.Unset] = schemas.unset,
        taxId: typing.Union[MetaOapg.properties.taxId, str, schemas.Unset] = schemas.unset,
        registrationLocation: typing.Union[MetaOapg.properties.registrationLocation, str, schemas.Unset] = schemas.unset,
        website: typing.Union[MetaOapg.properties.website, str, schemas.Unset] = schemas.unset,
        postalAddress: typing.Union[MetaOapg.properties.postalAddress, str, schemas.Unset] = schemas.unset,
        beneficiaries: typing.Union['ApplicantChangeCompanyDataRequest1Beneficiaries', schemas.Unset] = schemas.unset,
        addresses: typing.Union['ApplicantChangeCompanyDataRequest1Addresses', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ApplicantChangeCompanyDataRequest1':
        return super().__new__(
            cls,
            *args,
            registrationNumber=registrationNumber,
            companyName=companyName,
            country=country,
            legalAddress=legalAddress,
            incorporatedOn=incorporatedOn,
            type=type,
            email=email,
            controlScheme=controlScheme,
            phone=phone,
            taxId=taxId,
            registrationLocation=registrationLocation,
            website=website,
            postalAddress=postalAddress,
            beneficiaries=beneficiaries,
            addresses=addresses,
            _configuration=_configuration,
            **kwargs,
        )

from sumsub_python_sdk.model.applicant_change_company_data_request1_addresses import ApplicantChangeCompanyDataRequest1Addresses
from sumsub_python_sdk.model.applicant_change_company_data_request1_beneficiaries import ApplicantChangeCompanyDataRequest1Beneficiaries
