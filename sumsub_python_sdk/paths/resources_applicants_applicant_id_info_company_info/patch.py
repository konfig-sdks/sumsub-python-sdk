# coding: utf-8

"""
    Sumsub API

    Sumsub is the one verification platform to secure the whole user journey. With Sumsub's customizable KYC, KYB, transaction monitoring and fraud prevention solutions, you can orchestrate your verification process, welcome more customers worldwide, meet compliance requirements, reduce costs and protect your business.  Sumsub has over 2,000 clients in fintech, crypto, transportation, trading, e-commerce and gaming industries including Binance, Wirex, Avis, Bybit, Huobi, Unlimit, Flutter, Kaizen Gaming, and TransferGo.

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from sumsub_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from sumsub_python_sdk.api_response import AsyncGeneratorResponse
from sumsub_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from sumsub_python_sdk import schemas  # noqa: F401

from sumsub_python_sdk.model.applicant_change_company_data_request1 import ApplicantChangeCompanyDataRequest1 as ApplicantChangeCompanyDataRequest1Schema
from sumsub_python_sdk.model.applicant_change_company_data_request_beneficiaries import ApplicantChangeCompanyDataRequestBeneficiaries as ApplicantChangeCompanyDataRequestBeneficiariesSchema
from sumsub_python_sdk.model.applicant_change_company_data_request import ApplicantChangeCompanyDataRequest as ApplicantChangeCompanyDataRequestSchema
from sumsub_python_sdk.model.applicant_change_company_data_request_addresses import ApplicantChangeCompanyDataRequestAddresses as ApplicantChangeCompanyDataRequestAddressesSchema

from sumsub_python_sdk.type.applicant_change_company_data_request import ApplicantChangeCompanyDataRequest
from sumsub_python_sdk.type.applicant_change_company_data_request1 import ApplicantChangeCompanyDataRequest1
from sumsub_python_sdk.type.applicant_change_company_data_request_addresses import ApplicantChangeCompanyDataRequestAddresses
from sumsub_python_sdk.type.applicant_change_company_data_request_beneficiaries import ApplicantChangeCompanyDataRequestBeneficiaries

from ...api_client import Dictionary
from sumsub_python_sdk.pydantic.applicant_change_company_data_request_addresses import ApplicantChangeCompanyDataRequestAddresses as ApplicantChangeCompanyDataRequestAddressesPydantic
from sumsub_python_sdk.pydantic.applicant_change_company_data_request_beneficiaries import ApplicantChangeCompanyDataRequestBeneficiaries as ApplicantChangeCompanyDataRequestBeneficiariesPydantic
from sumsub_python_sdk.pydantic.applicant_change_company_data_request import ApplicantChangeCompanyDataRequest as ApplicantChangeCompanyDataRequestPydantic
from sumsub_python_sdk.pydantic.applicant_change_company_data_request1 import ApplicantChangeCompanyDataRequest1 as ApplicantChangeCompanyDataRequest1Pydantic

from . import path

# Path params
ApplicantIdSchema = schemas.StrSchema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'applicantId': typing.Union[ApplicantIdSchema, str, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_applicant_id = api_client.PathParameter(
    name="applicantId",
    style=api_client.ParameterStyle.SIMPLE,
    schema=ApplicantIdSchema,
    required=True,
)
# body param
SchemaForRequestBodyApplicationJson = ApplicantChangeCompanyDataRequestSchema
SchemaForRequestBodyMultipartFormData = ApplicantChangeCompanyDataRequest1Schema


request_body_applicant_change_company_data_request = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
        'multipart/form-data': api_client.MediaType(
            schema=SchemaForRequestBodyMultipartFormData),
    },
)
_auth = [
    'sec0',
]


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
)
_status_code_to_response = {
    '200': _response_for_200,
}


class BaseApi(api_client.Api):

    def _change_company_data_mapped_args(
        self,
        company_name: str,
        registration_number: str,
        applicant_id: str,
        country: typing.Optional[str] = None,
        legal_address: typing.Optional[str] = None,
        incorporated_on: typing.Optional[str] = None,
        type: typing.Optional[str] = None,
        email: typing.Optional[str] = None,
        control_scheme: typing.Optional[str] = None,
        phone: typing.Optional[str] = None,
        tax_id: typing.Optional[str] = None,
        registration_location: typing.Optional[str] = None,
        website: typing.Optional[str] = None,
        postal_address: typing.Optional[str] = None,
        beneficiaries: typing.Optional[ApplicantChangeCompanyDataRequestBeneficiaries] = None,
        addresses: typing.Optional[ApplicantChangeCompanyDataRequestAddresses] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _path_params = {}
        _body = {}
        if company_name is not None:
            _body["companyName"] = company_name
        if registration_number is not None:
            _body["registrationNumber"] = registration_number
        if country is not None:
            _body["country"] = country
        if legal_address is not None:
            _body["legalAddress"] = legal_address
        if incorporated_on is not None:
            _body["incorporatedOn"] = incorporated_on
        if type is not None:
            _body["type"] = type
        if email is not None:
            _body["email"] = email
        if control_scheme is not None:
            _body["controlScheme"] = control_scheme
        if phone is not None:
            _body["phone"] = phone
        if tax_id is not None:
            _body["taxId"] = tax_id
        if registration_location is not None:
            _body["registrationLocation"] = registration_location
        if website is not None:
            _body["website"] = website
        if postal_address is not None:
            _body["postalAddress"] = postal_address
        if beneficiaries is not None:
            _body["beneficiaries"] = beneficiaries
        if addresses is not None:
            _body["addresses"] = addresses
        args.body = _body
        if applicant_id is not None:
            _path_params["applicantId"] = applicant_id
        args.path = _path_params
        return args

    async def _achange_company_data_oapg(
        self,
        body: typing.Any = None,
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        content_type: str = 'application/json',
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Change company data
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_applicant_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        method = 'patch'.upper()
        _headers.add('Content-Type', content_type)
    
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/resources/applicants/{applicantId}/info/companyInfo',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        if body is not schemas.unset:
            serialized_data = request_body_applicant_change_company_data_request.serialize(body, content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _change_company_data_oapg(
        self,
        body: typing.Any = None,
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        content_type: str = 'application/json',
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Change company data
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_applicant_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        method = 'patch'.upper()
        _headers.add('Content-Type', content_type)
    
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/resources/applicants/{applicantId}/info/companyInfo',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        if body is not schemas.unset:
            serialized_data = request_body_applicant_change_company_data_request.serialize(body, content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class ChangeCompanyDataRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def achange_company_data(
        self,
        company_name: str,
        registration_number: str,
        applicant_id: str,
        country: typing.Optional[str] = None,
        legal_address: typing.Optional[str] = None,
        incorporated_on: typing.Optional[str] = None,
        type: typing.Optional[str] = None,
        email: typing.Optional[str] = None,
        control_scheme: typing.Optional[str] = None,
        phone: typing.Optional[str] = None,
        tax_id: typing.Optional[str] = None,
        registration_location: typing.Optional[str] = None,
        website: typing.Optional[str] = None,
        postal_address: typing.Optional[str] = None,
        beneficiaries: typing.Optional[ApplicantChangeCompanyDataRequestBeneficiaries] = None,
        addresses: typing.Optional[ApplicantChangeCompanyDataRequestAddresses] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._change_company_data_mapped_args(
            company_name=company_name,
            registration_number=registration_number,
            applicant_id=applicant_id,
            country=country,
            legal_address=legal_address,
            incorporated_on=incorporated_on,
            type=type,
            email=email,
            control_scheme=control_scheme,
            phone=phone,
            tax_id=tax_id,
            registration_location=registration_location,
            website=website,
            postal_address=postal_address,
            beneficiaries=beneficiaries,
            addresses=addresses,
        )
        return await self._achange_company_data_oapg(
            body=args.body,
            path_params=args.path,
            **kwargs,
        )
    
    def change_company_data(
        self,
        company_name: str,
        registration_number: str,
        applicant_id: str,
        country: typing.Optional[str] = None,
        legal_address: typing.Optional[str] = None,
        incorporated_on: typing.Optional[str] = None,
        type: typing.Optional[str] = None,
        email: typing.Optional[str] = None,
        control_scheme: typing.Optional[str] = None,
        phone: typing.Optional[str] = None,
        tax_id: typing.Optional[str] = None,
        registration_location: typing.Optional[str] = None,
        website: typing.Optional[str] = None,
        postal_address: typing.Optional[str] = None,
        beneficiaries: typing.Optional[ApplicantChangeCompanyDataRequestBeneficiaries] = None,
        addresses: typing.Optional[ApplicantChangeCompanyDataRequestAddresses] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._change_company_data_mapped_args(
            company_name=company_name,
            registration_number=registration_number,
            applicant_id=applicant_id,
            country=country,
            legal_address=legal_address,
            incorporated_on=incorporated_on,
            type=type,
            email=email,
            control_scheme=control_scheme,
            phone=phone,
            tax_id=tax_id,
            registration_location=registration_location,
            website=website,
            postal_address=postal_address,
            beneficiaries=beneficiaries,
            addresses=addresses,
        )
        return self._change_company_data_oapg(
            body=args.body,
            path_params=args.path,
        )

class ChangeCompanyData(BaseApi):

    async def achange_company_data(
        self,
        company_name: str,
        registration_number: str,
        applicant_id: str,
        country: typing.Optional[str] = None,
        legal_address: typing.Optional[str] = None,
        incorporated_on: typing.Optional[str] = None,
        type: typing.Optional[str] = None,
        email: typing.Optional[str] = None,
        control_scheme: typing.Optional[str] = None,
        phone: typing.Optional[str] = None,
        tax_id: typing.Optional[str] = None,
        registration_location: typing.Optional[str] = None,
        website: typing.Optional[str] = None,
        postal_address: typing.Optional[str] = None,
        beneficiaries: typing.Optional[ApplicantChangeCompanyDataRequestBeneficiaries] = None,
        addresses: typing.Optional[ApplicantChangeCompanyDataRequestAddresses] = None,
        validate: bool = False,
        **kwargs,
    ) -> None:
        raw_response = await self.raw.achange_company_data(
            company_name=company_name,
            registration_number=registration_number,
            applicant_id=applicant_id,
            country=country,
            legal_address=legal_address,
            incorporated_on=incorporated_on,
            type=type,
            email=email,
            control_scheme=control_scheme,
            phone=phone,
            tax_id=tax_id,
            registration_location=registration_location,
            website=website,
            postal_address=postal_address,
            beneficiaries=beneficiaries,
            addresses=addresses,
            **kwargs,
        )
    
    
    def change_company_data(
        self,
        company_name: str,
        registration_number: str,
        applicant_id: str,
        country: typing.Optional[str] = None,
        legal_address: typing.Optional[str] = None,
        incorporated_on: typing.Optional[str] = None,
        type: typing.Optional[str] = None,
        email: typing.Optional[str] = None,
        control_scheme: typing.Optional[str] = None,
        phone: typing.Optional[str] = None,
        tax_id: typing.Optional[str] = None,
        registration_location: typing.Optional[str] = None,
        website: typing.Optional[str] = None,
        postal_address: typing.Optional[str] = None,
        beneficiaries: typing.Optional[ApplicantChangeCompanyDataRequestBeneficiaries] = None,
        addresses: typing.Optional[ApplicantChangeCompanyDataRequestAddresses] = None,
        validate: bool = False,
    ) -> None:
        raw_response = self.raw.change_company_data(
            company_name=company_name,
            registration_number=registration_number,
            applicant_id=applicant_id,
            country=country,
            legal_address=legal_address,
            incorporated_on=incorporated_on,
            type=type,
            email=email,
            control_scheme=control_scheme,
            phone=phone,
            tax_id=tax_id,
            registration_location=registration_location,
            website=website,
            postal_address=postal_address,
            beneficiaries=beneficiaries,
            addresses=addresses,
        )


class ApiForpatch(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def apatch(
        self,
        company_name: str,
        registration_number: str,
        applicant_id: str,
        country: typing.Optional[str] = None,
        legal_address: typing.Optional[str] = None,
        incorporated_on: typing.Optional[str] = None,
        type: typing.Optional[str] = None,
        email: typing.Optional[str] = None,
        control_scheme: typing.Optional[str] = None,
        phone: typing.Optional[str] = None,
        tax_id: typing.Optional[str] = None,
        registration_location: typing.Optional[str] = None,
        website: typing.Optional[str] = None,
        postal_address: typing.Optional[str] = None,
        beneficiaries: typing.Optional[ApplicantChangeCompanyDataRequestBeneficiaries] = None,
        addresses: typing.Optional[ApplicantChangeCompanyDataRequestAddresses] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._change_company_data_mapped_args(
            company_name=company_name,
            registration_number=registration_number,
            applicant_id=applicant_id,
            country=country,
            legal_address=legal_address,
            incorporated_on=incorporated_on,
            type=type,
            email=email,
            control_scheme=control_scheme,
            phone=phone,
            tax_id=tax_id,
            registration_location=registration_location,
            website=website,
            postal_address=postal_address,
            beneficiaries=beneficiaries,
            addresses=addresses,
        )
        return await self._achange_company_data_oapg(
            body=args.body,
            path_params=args.path,
            **kwargs,
        )
    
    def patch(
        self,
        company_name: str,
        registration_number: str,
        applicant_id: str,
        country: typing.Optional[str] = None,
        legal_address: typing.Optional[str] = None,
        incorporated_on: typing.Optional[str] = None,
        type: typing.Optional[str] = None,
        email: typing.Optional[str] = None,
        control_scheme: typing.Optional[str] = None,
        phone: typing.Optional[str] = None,
        tax_id: typing.Optional[str] = None,
        registration_location: typing.Optional[str] = None,
        website: typing.Optional[str] = None,
        postal_address: typing.Optional[str] = None,
        beneficiaries: typing.Optional[ApplicantChangeCompanyDataRequestBeneficiaries] = None,
        addresses: typing.Optional[ApplicantChangeCompanyDataRequestAddresses] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._change_company_data_mapped_args(
            company_name=company_name,
            registration_number=registration_number,
            applicant_id=applicant_id,
            country=country,
            legal_address=legal_address,
            incorporated_on=incorporated_on,
            type=type,
            email=email,
            control_scheme=control_scheme,
            phone=phone,
            tax_id=tax_id,
            registration_location=registration_location,
            website=website,
            postal_address=postal_address,
            beneficiaries=beneficiaries,
            addresses=addresses,
        )
        return self._change_company_data_oapg(
            body=args.body,
            path_params=args.path,
        )

