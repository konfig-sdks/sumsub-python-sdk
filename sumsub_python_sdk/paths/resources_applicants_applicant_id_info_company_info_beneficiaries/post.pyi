# coding: utf-8

"""
    Sumsub API

    Sumsub is the one verification platform to secure the whole user journey. With Sumsub's customizable KYC, KYB, transaction monitoring and fraud prevention solutions, you can orchestrate your verification process, welcome more customers worldwide, meet compliance requirements, reduce costs and protect your business.  Sumsub has over 2,000 clients in fintech, crypto, transportation, trading, e-commerce and gaming industries including Binance, Wirex, Avis, Bybit, Huobi, Unlimit, Flutter, Kaizen Gaming, and TransferGo.

    The version of the OpenAPI document: 1.0
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from sumsub_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from sumsub_python_sdk.api_response import AsyncGeneratorResponse
from sumsub_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from sumsub_python_sdk import schemas  # noqa: F401

from sumsub_python_sdk.model.applicant_add_beneficiary_request_positions import ApplicantAddBeneficiaryRequestPositions as ApplicantAddBeneficiaryRequestPositionsSchema
from sumsub_python_sdk.model.applicant_add_beneficiary_request1 import ApplicantAddBeneficiaryRequest1 as ApplicantAddBeneficiaryRequest1Schema
from sumsub_python_sdk.model.applicant_add_beneficiary_request import ApplicantAddBeneficiaryRequest as ApplicantAddBeneficiaryRequestSchema
from sumsub_python_sdk.model.applicant_add_beneficiary_request_applicant import ApplicantAddBeneficiaryRequestApplicant as ApplicantAddBeneficiaryRequestApplicantSchema

from sumsub_python_sdk.type.applicant_add_beneficiary_request_positions import ApplicantAddBeneficiaryRequestPositions
from sumsub_python_sdk.type.applicant_add_beneficiary_request import ApplicantAddBeneficiaryRequest
from sumsub_python_sdk.type.applicant_add_beneficiary_request_applicant import ApplicantAddBeneficiaryRequestApplicant
from sumsub_python_sdk.type.applicant_add_beneficiary_request1 import ApplicantAddBeneficiaryRequest1

from ...api_client import Dictionary
from sumsub_python_sdk.pydantic.applicant_add_beneficiary_request_applicant import ApplicantAddBeneficiaryRequestApplicant as ApplicantAddBeneficiaryRequestApplicantPydantic
from sumsub_python_sdk.pydantic.applicant_add_beneficiary_request import ApplicantAddBeneficiaryRequest as ApplicantAddBeneficiaryRequestPydantic
from sumsub_python_sdk.pydantic.applicant_add_beneficiary_request1 import ApplicantAddBeneficiaryRequest1 as ApplicantAddBeneficiaryRequest1Pydantic
from sumsub_python_sdk.pydantic.applicant_add_beneficiary_request_positions import ApplicantAddBeneficiaryRequestPositions as ApplicantAddBeneficiaryRequestPositionsPydantic

# Path params
ApplicantIdSchema = schemas.StrSchema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'applicantId': typing.Union[ApplicantIdSchema, str, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_applicant_id = api_client.PathParameter(
    name="applicantId",
    style=api_client.ParameterStyle.SIMPLE,
    schema=ApplicantIdSchema,
    required=True,
)
# body param
SchemaForRequestBodyApplicationJson = ApplicantAddBeneficiaryRequestSchema
SchemaForRequestBodyMultipartFormData = ApplicantAddBeneficiaryRequest1Schema


request_body_applicant_add_beneficiary_request = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
        'multipart/form-data': api_client.MediaType(
            schema=SchemaForRequestBodyMultipartFormData),
    },
)


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: schemas.Unset = schemas.unset


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
)


class BaseApi(api_client.Api):

    def _add_beneficiary_mapped_args(
        self,
        applicant: ApplicantAddBeneficiaryRequestApplicant,
        applicant_id: str,
        type: str,
        applicant_id: str,
        positions: typing.Optional[ApplicantAddBeneficiaryRequestPositions] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _path_params = {}
        _body = {}
        if applicant is not None:
            _body["applicant"] = applicant
        if applicant_id is not None:
            _body["applicantId"] = applicant_id
        if positions is not None:
            _body["positions"] = positions
        if type is not None:
            _body["type"] = type
        args.body = _body
        if applicant_id is not None:
            _path_params["applicantId"] = applicant_id
        args.path = _path_params
        return args

    async def _aadd_beneficiary_oapg(
        self,
        body: typing.Any = None,
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        content_type: str = 'application/json',
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Add applicant as beneficiary
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_applicant_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/resources/applicants/{applicantId}/info/companyInfo/beneficiaries',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        if body is not schemas.unset:
            serialized_data = request_body_applicant_add_beneficiary_request.serialize(body, content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _add_beneficiary_oapg(
        self,
        body: typing.Any = None,
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        content_type: str = 'application/json',
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Add applicant as beneficiary
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_applicant_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/resources/applicants/{applicantId}/info/companyInfo/beneficiaries',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        if body is not schemas.unset:
            serialized_data = request_body_applicant_add_beneficiary_request.serialize(body, content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class AddBeneficiaryRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def aadd_beneficiary(
        self,
        applicant: ApplicantAddBeneficiaryRequestApplicant,
        applicant_id: str,
        type: str,
        applicant_id: str,
        positions: typing.Optional[ApplicantAddBeneficiaryRequestPositions] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._add_beneficiary_mapped_args(
            applicant=applicant,
            applicant_id=applicant_id,
            type=type,
            applicant_id=applicant_id,
            positions=positions,
        )
        return await self._aadd_beneficiary_oapg(
            body=args.body,
            path_params=args.path,
            **kwargs,
        )
    
    def add_beneficiary(
        self,
        applicant: ApplicantAddBeneficiaryRequestApplicant,
        applicant_id: str,
        type: str,
        applicant_id: str,
        positions: typing.Optional[ApplicantAddBeneficiaryRequestPositions] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._add_beneficiary_mapped_args(
            applicant=applicant,
            applicant_id=applicant_id,
            type=type,
            applicant_id=applicant_id,
            positions=positions,
        )
        return self._add_beneficiary_oapg(
            body=args.body,
            path_params=args.path,
        )

class AddBeneficiary(BaseApi):

    async def aadd_beneficiary(
        self,
        applicant: ApplicantAddBeneficiaryRequestApplicant,
        applicant_id: str,
        type: str,
        applicant_id: str,
        positions: typing.Optional[ApplicantAddBeneficiaryRequestPositions] = None,
        validate: bool = False,
        **kwargs,
    ) -> None:
        raw_response = await self.raw.aadd_beneficiary(
            applicant=applicant,
            applicant_id=applicant_id,
            type=type,
            applicant_id=applicant_id,
            positions=positions,
            **kwargs,
        )
    
    
    def add_beneficiary(
        self,
        applicant: ApplicantAddBeneficiaryRequestApplicant,
        applicant_id: str,
        type: str,
        applicant_id: str,
        positions: typing.Optional[ApplicantAddBeneficiaryRequestPositions] = None,
        validate: bool = False,
    ) -> None:
        raw_response = self.raw.add_beneficiary(
            applicant=applicant,
            applicant_id=applicant_id,
            type=type,
            applicant_id=applicant_id,
            positions=positions,
        )


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def apost(
        self,
        applicant: ApplicantAddBeneficiaryRequestApplicant,
        applicant_id: str,
        type: str,
        applicant_id: str,
        positions: typing.Optional[ApplicantAddBeneficiaryRequestPositions] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._add_beneficiary_mapped_args(
            applicant=applicant,
            applicant_id=applicant_id,
            type=type,
            applicant_id=applicant_id,
            positions=positions,
        )
        return await self._aadd_beneficiary_oapg(
            body=args.body,
            path_params=args.path,
            **kwargs,
        )
    
    def post(
        self,
        applicant: ApplicantAddBeneficiaryRequestApplicant,
        applicant_id: str,
        type: str,
        applicant_id: str,
        positions: typing.Optional[ApplicantAddBeneficiaryRequestPositions] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._add_beneficiary_mapped_args(
            applicant=applicant,
            applicant_id=applicant_id,
            type=type,
            applicant_id=applicant_id,
            positions=positions,
        )
        return self._add_beneficiary_oapg(
            body=args.body,
            path_params=args.path,
        )

